<?php

namespace Prodigious\Sonata\MenuBundle\Controller;

use Psr\Container\ContainerInterface;
use Prodigious\Sonata\MenuBundle\Manager\MenuManager;
use Sonata\AdminBundle\Route\RouteGeneratorInterface;
use Sonata\AdminBundle\Controller\CRUDController as Controller;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Translation\TranslatorInterface;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;

class MenuController extends Controller
{
	private MenuManager $menuManager;
	private RouteGeneratorInterface $routeGenerator;

	public function __construct(MenuManager $menuManager, RouteGeneratorInterface $generator)
	{
		$this->menuManager = $menuManager;
		$this->routeGenerator = $generator;
	}

	public static function getSubscribedServices(): array
	{
		return parent::getSubscribedServices(); // TODO: Change the autogenerated stub
	}

	/**
	 * Manager menu items
	 * @param $id
	 */
	public function itemsAction(Request $request, $id)
	{
		$object = $this->admin->getSubject();

		if (empty($object)) {
			throw new NotFoundHttpException(sprintf('unable to find the object with id : %s', $id));
		}


		if (NULL !== $request->get('btn_update') && $request->getMethod() == 'POST') {

			$menuId = $request->get('menu', NULL);
			$items = $request->get('items', NULL);

			if (!empty($items) && !empty(intval($menuId))) {
				$items = json_decode($items);

				$update = $this->menuManager->updateMenuTree($menuId, $items);
				/** @var TranslatorInterface $translator */
				$translator = $this->container->get('translator');

				$request->getSession()->getFlashBag()->add('notice',
					$translator->trans(
						$update ? 'config.label_saved' : 'config.label_error',
						[],
						'ProdigiousSonataMenuBundle'
					)
				);

				return new RedirectResponse($this->routeGenerator
					->generateUrl(
						$this->admin,
						'items',
						['id' => $menuId]
					)
				);
			}
		}

		$menuItemsEnabled = $this->menuManager->getRootItems($object, MenuManager::STATUS_ENABLED);
		$menuItemsDisabled = $this->menuManager->getDisabledItems($object);

		$menus = $this->menuManager->findAll();

		return $this->renderWithExtraParams('@ProdigiousSonataMenu/Menu/menu_edit_items.html.twig', [
			'menus'             => $menus,
			'menu'              => $object,
			'menuItemsEnabled'  => $menuItemsEnabled,
			'menuItemsDisabled' => $menuItemsDisabled
		]);
	}
}
